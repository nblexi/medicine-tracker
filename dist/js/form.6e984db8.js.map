{"version":3,"file":"js/form.6e984db8.js","mappings":"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","sources":["webpack://medicine-tracker/./src/views/FormView.vue","webpack://medicine-tracker/./src/components/Form.vue","webpack://medicine-tracker/./src/components/Form.vue?425d","webpack://medicine-tracker/./src/components/List.vue","webpack://medicine-tracker/./src/components/List.vue?b8c4","webpack://medicine-tracker/./src/views/FormView.vue?720a","webpack://medicine-tracker/./node_modules/nanostores/atom/index.js","webpack://medicine-tracker/./src/store.js"],"sourcesContent":["<template>\n  <div class='mx-auto w-50 container'>\n    <List :key=\"listKey\" :updateList='forceRerender'/>\n    <Form :key=\"formKey\" :updateForm='forceFormRerender' :updateList='forceRerender'/>\n  </div>\n</template>\n\n<script>\nimport Form from '@/components/Form.vue'\nimport List from '@/components/List.vue'\nimport { ref } from \"vue\";\n\nexport default {\n  name: 'FormView',\n  components: {\n    Form,\n    List\n  },\n  data() {\n    return {\n      listKey: 0,\n      formKey: 0\n    };\n  },\n  methods: {\n    forceFormRerender() {\n      this.formKey += 1;\n    },\n    forceRerender() {\n      this.listKey += 1;\n    }\n  }\n\n}\n</script>\n","<template>\n  <div id='row'>\n    <div>\n      <div class=\"mb-4\">\n\t\t\t\t<label for=\"medicine_name\" class=\"form-label text-light\">Medicine Name:</label>\n\t\t\t\t<input class=\"form-control al_left\" type=\"text\" v-model=\"form_name\"  @input=\"event => text = event.target.value\" placeholder=\"Estradiol Valerate\" />\n\t\t </div>\n      <div class=\"mb-4\">\n\t\t\t<label for=\"medicine_frequency\" class=\"form-label text-light\">Medicine Frequency:</label>\n\t\t\t\t<input class=\"form-control\" v-model=\"form_frequency\" type=\"text\" placeholder=\"3\" />\n\t\t\t\t<label class=\"form-text text-light\" for=\"input2\">\n\t\t\t\t\tHow many times a day?\n\t\t\t\t</label>\n\t\t </div>\n      <div class=\"mb-4\">\n\t\t\t <label for=\"medicine_dose\" class=\"form-label text-light\">Medicine Dose:</label>\n\t\t\t\t <input class=\"form-control\" v-model=\"form_dose\" type=\"text\" placeholder=\"1\" />\n\t\t\t\t <label class=\"form-text text-light\" for=\"input2\">\n\t\t\t\t\t\tHow many pills per dose? (.25 for a quarter pill per dose)\n\t\t\t\t </label>\n\t\t\t</div>\n      <div class=\"mb-4\">\n\t\t\t\t<label for=\"medicine_dose\" class=\"form-label text-light\">Pills Per Blister</label>\n\t\t\t\t\t<input class=\"form-control\" v-model=\"form_ppb\" type=\"text\" placeholder=\"28\" />\n\t\t\t\t\t<label class=\"form-text text-light\" for=\"input2\">\n\t\t\t\t\t\t How many pills come per blister?\n\t\t\t\t\t</label>\n\t\t\t </div>\n\t\t\t<button class='btn btn-dark' @click='form_submit'>Add</button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from \"vue\";\nconst props = defineProps({\n  updateList: {\n    type: Function\n  },\n  updateForm: {\n    type: Function\n  }\n})\nimport { $medicine_list, $admin } from '../store.js'\nconst medList = $medicine_list.value;\nconst target_date = $admin.value.target_date;\n\nlet medicine_name;\nlet medicine_frequency;\nlet medicine_dose;\nlet pills_per_blister;\n\nlet form_name = ref(\"\");\nlet form_frequency = ref(\"\");\nlet form_dose = ref(\"\");\nlet form_ppb = ref(\"\");\n\nlet form_value_verification = (value) => {\n  if(value != '' && value != null && value != undefined){\n    if (typeof value === 'string' && value.trim().length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\nlet form_submit = () => {\n  if(form_value_verification(form_name.value) && form_value_verification(form_frequency.value) && form_value_verification(form_dose.value) && form_value_verification(form_ppb.value)){\n\n\n    medicine_name = form_name.value.trim();\n    medicine_frequency = parseFloat(form_frequency.value.trim());\n    medicine_dose = parseFloat(form_dose.value.trim());\n    pills_per_blister = parseFloat(form_ppb.value.trim());\n\n    if (medList.some(item => item.name === medicine_name)) {\n      update();\n    } else {\n      add();\n    }\n    form_name = '';\n    form_frequency = '';\n    form_dose = '';\n    form_ppb = '';\n    props.updateForm();\n    props.updateList();\n  } else {\n    console.log('Invalid data');\n  }\n}\n\n\nlet update = (medicine_name) => {\n  let index = medList.findIndex(item => item.name === medicine_name);\n  if (index !== -1) {\n    medicine_list[index] = {\n    name: medicine_name,\n    frequency: medicine_frequency,\n    dose: medicine_dose,\n    ppb: pills_per_blister\n    };\n  }\n}\n\nlet add = () => {\n  const date = new Date();\n  let year = date.getFullYear();\n  let month = (date.getMonth() + 1);\n  let day = date.getDate();\n  let todays_date = `${day}/${month}/${year}`;\n\n  let newArray = [...medList];\n\n  newArray.push({\n    name: medicine_name,\n    frequency: medicine_frequency,\n    dose: medicine_dose,\n    ppb: pills_per_blister,\n    blister_number: 0,\n    loose_number: 0,\n    pillbox_number: 0,\n    total_pills: 0,\n    total_days: 0,\n    needed_for_target: 0,\n    need_pills: 0,\n    need_blisters: 0,\n    will_run_out: todays_date,\n\n  });\n\n  $medicine_list.set(newArray);\n}\n\n</script>\n\n<style scoped>\n.al_left {\n  text-align: left;\n}\ninput {\n  text-align: center;\n  background-color: #262626;\n  border: 1px solid #272727;\n  border-color: #000000;\n  color: rgb(255, 255, 255);\n}\n\n::placeholder {\n  color: rgb(127, 127, 127);\n  opacity: 1; /* Firefox */\n}\n</style>","import script from \"./Form.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Form.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Form.vue?vue&type=style&index=0&id=c86fa46c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-c86fa46c\"]])\n\nexport default __exports__","<template>\n  <div class='mb-5 text-start'>\n    <h3 class='text-start mb-3'>Medicine List:</h3>\n      <div v-for=\"medicine in medList\" class='mb-4'>\n        <h5 class='text-lg-start'>{{medicine.name}}</h5>\n        <span>Taken {{medicine.frequency}} {{frequency_label(medicine.frequency)}} a day, </span>\n        <span>{{medicine.dose}} {{dose_label(medicine.dose)}} per dose, </span>\n        <span>{{medicine.ppb}} {{dose_label(medicine.ppb)}} per blister</span>\n\t\t\t\t<span class='me-2' @click='remove(medicine.name)'><br><i class=\"bi bi-archive\"></i></span>\n      </div>\n  </div>\n</template>\n\n<script setup>\nimport { $medicine_list } from '../store.js'\nlet medList = $medicine_list.value;\nconst props = defineProps({\n  updateList: {\n    type: Function\n  }\n})\n\nlet frequency_label = (freq) => {\n\tif (freq == 1) {\n\t\treturn \"time\";\n\t} else {\n\t\treturn \"times\";\n\t}\n}\n\nlet remove = (name) => {\n\tconsole.log('remove')\n\tconsole.log(name)\n  let index = medList.findIndex(item => item.name === name);\n  if (index !== -1) {\n  \tmedList.splice(index, 1);\n\t\t$medicine_list.set(medList);\n\t\tconsole.log($medicine_list.value)\n\t\tprops.updateList();\n  }\n}\n\nlet dose_label = (dose) => {\n\tif (dose == 1) {\n\t\treturn \"pill\";\n\t} else if (dose < 1) {\n\t\treturn \"of a pill\";\n\t} else {\n\t\treturn \"pills\";\n\t}\n}\n</script>\n\n<style scoped>\nh3, h5, span {\n  color: rgb(209, 209, 209);\n}\n.me-2 {\n\tcursor: pointer;\n}\n\n@import'~bootstrap-icons/font/bootstrap-icons.css'\n</style>","import script from \"./List.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./List.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./List.vue?vue&type=style&index=0&id=aefd3ae2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-aefd3ae2\"]])\n\nexport default __exports__","import { render } from \"./FormView.vue?vue&type=template&id=86d6217c\"\nimport script from \"./FormView.vue?vue&type=script&lang=js\"\nexport * from \"./FormView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { clean } from '../clean-stores/index.js'\n\nlet listenerQueue = []\n\nexport let atom = (initialValue, level) => {\n  let listeners = []\n  let $atom = {\n    get() {\n      if (!$atom.lc) {\n        $atom.listen(() => {})()\n      }\n      return $atom.value\n    },\n    l: level || 0,\n    lc: 0,\n    listen(listener, listenerLevel) {\n      $atom.lc = listeners.push(listener, listenerLevel || $atom.l) / 2\n\n      return () => {\n        let index = listeners.indexOf(listener)\n        if (~index) {\n          listeners.splice(index, 2)\n          if (!--$atom.lc) $atom.off()\n        }\n      }\n    },\n    notify(oldValue, changedKey) {\n      let runListenerQueue = !listenerQueue.length\n      for (let i = 0; i < listeners.length; i += 2) {\n        listenerQueue.push(\n          listeners[i],\n          listeners[i + 1],\n          $atom.value,\n          oldValue,\n          changedKey\n        )\n      }\n\n      if (runListenerQueue) {\n        for (let i = 0; i < listenerQueue.length; i += 5) {\n          let skip\n          for (let j = i + 1; !skip && (j += 5) < listenerQueue.length; ) {\n            if (listenerQueue[j] < listenerQueue[i + 1]) {\n              skip = listenerQueue.push(\n                listenerQueue[i],\n                listenerQueue[i + 1],\n                listenerQueue[i + 2],\n                listenerQueue[i + 3],\n                listenerQueue[i + 4]\n              )\n            }\n          }\n\n          if (!skip) {\n            listenerQueue[i](\n              listenerQueue[i + 2],\n              listenerQueue[i + 3],\n              listenerQueue[i + 4]\n            )\n          }\n        }\n        listenerQueue.length = 0\n      }\n    },\n    /* It will be called on last listener unsubscribing.\n       We will redefine it in onMount and onStop. */\n    off() {},\n    set(newValue) {\n      let oldValue = $atom.value\n      if (oldValue !== newValue) {\n        $atom.value = newValue\n        $atom.notify(oldValue)\n      }\n    },\n    subscribe(listener, listenerLevel) {\n      let unbind = $atom.listen(listener, listenerLevel)\n      listener($atom.value)\n      return unbind\n    },\n    value: initialValue\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    $atom[clean] = () => {\n      listeners = []\n      $atom.lc = 0\n      $atom.off()\n    }\n  }\n\n  return $atom\n}\n","import { atom, map } from 'nanostores';\n\nexport const $admin = atom({});\n\nexport const $medicine_list = atom([]);\n\n/*\n  name: 'lexi',\n  start_date: '02/07/2024',\n  target_date: '12/21/2024',\n  target_days: -1,\n  days_on: -1,\n{\n    name: 'Estradiol Valerate',\n    frequency: 3,\n    dose: 1,\n    ppb: 28,\n    blister_number: 0,\n    loose_number: 0,\n    pillbox_number: 0,\n    total_pills: 0,\n    total_days: 0,\n    needed_for_target: 0,\n    need_pills: 0,\n    need_blisters: 0,\n    will_run_out: '2024/12/21',\n  },\n*/\n"],"names":["class","key","listKey","updateList","forceRerender","formKey","updateForm","forceFormRerender","props","medList","value","target_date","medicine_name","medicine_frequency","medicine_dose","pills_per_blister","form_name","form_frequency","form_dose","form_ppb","form_value_verification","undefined","trim","length","form_submit","parseFloat","some","item","name","update","add","console","log","index","findIndex","medicine_list","frequency","dose","ppb","date","Date","year","getFullYear","month","getMonth","day","getDate","todays_date","newArray","push","blister_number","loose_number","pillbox_number","total_pills","total_days","needed_for_target","need_pills","need_blisters","will_run_out","set","__exports__","frequency_label","freq","remove","splice","dose_label","components","Form","List","data","methods","this","render","listenerQueue","atom","initialValue","level","listeners","$atom","get","lc","listen","l","listener","listenerLevel","indexOf","off","notify","oldValue","changedKey","runListenerQueue","i","skip","j","newValue","subscribe","unbind","$admin","$medicine_list"],"sourceRoot":""}