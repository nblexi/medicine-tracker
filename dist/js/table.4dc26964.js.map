{"version":3,"file":"js/table.4dc26964.js","mappings":"4KACOA,MAAM,mB,oEAAX,QAEM,MAFN,EAEM,G,WADJ,QAAqD,GAA7CC,IAAK,EAAAC,SAAWC,YAAa,EAAAC,e,+lCCkCzC,MAAMC,EAAU,IAAeC,MACzBC,EAAc,IAAOD,MAAMC,YACjC,IAAIC,EAAc,IAAOF,MAAME,YAE/B,MAAMC,EAAQ,EAMd,SAASC,EAAmBC,EAAKC,EAAM,GACrC,MAAMC,EAAUC,KAAKC,IAAI,GAAIH,GAC7B,OAAOE,KAAKE,MAAMC,WAAWN,GAAOE,GAAWA,CACjD,CAEA,IAAIK,EAAqB,CAACC,EAAOC,KAC/B,MAAMC,EAAWP,KAAKQ,IAAIF,EAAQD,GAC5BI,EAAWT,KAAKU,KAAKH,EAAW,OACtC,OAAOJ,WAAWM,EAAS,EAGzBE,EAAiBC,IACnB,IAAIC,EAAQtB,EAAQuB,WAAUC,GAAQA,EAAKH,OAASA,IACpD,IAAe,IAAXC,EAAc,CAChB,IAAIG,EAAiBb,WAAWc,SAASC,kBAAkB,WAAWL,GAAOrB,OACzE2B,EAAehB,WAAWc,SAASC,kBAAkB,SAASL,GAAOrB,OACrE4B,EAAiBjB,WAAWc,SAASC,kBAAkB,WAAWL,GAAOrB,OAEzE6B,EAAMlB,WAAWZ,EAAQsB,GAAOQ,KAChCC,EAAOnB,WAAWZ,EAAQsB,GAAOS,MACjCC,EAAYpB,WAAWZ,EAAQsB,GAAOU,WAGtCC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,cACZC,EAASJ,EAAKK,WAAa,EAC3BC,EAAMN,EAAKO,UACXC,EAAQ,GAAGJ,KAASE,KAAOJ,IAE/BO,QAAQC,IAAIF,GACZC,QAAQC,IAAIzC,GACZC,EAAcU,EAAmB,IAAIqB,KAAKO,GAAQ,IAAIP,KAAKhC,IAC3D,IAAO0C,IAAI,CAACzC,YAAaA,KAAgB,IAAOF,QAEhD,IAAI4C,EAAgBpB,EAAiBK,EAAOF,EAAgBC,EAAiBE,EACzEe,EAAalC,WAAWiC,GAAeb,EAAYD,IACnDgB,EAAoBtC,KAAKU,KAAKhB,GAAe4B,EAAOC,IACpDgB,EAAavC,KAAKU,KAAK4B,EAAoBF,GAC3CI,EAAgBxC,KAAKU,KAAK6B,EAAalB,GAK3CG,EAAKiB,QAAQjB,EAAKO,UAAYM,GAC9B,IAAIK,EAAe,GAAGlB,EAAKO,aAAaP,EAAKK,WAAa,KAAKL,EAAKG,gBAEhEgB,EAAY,IAAIpD,GAEpBoD,EAAU9B,GAAS,CACjBD,KAAMA,EACNW,UAAWhC,EAAQsB,GAAOU,UAC1BD,KAAM/B,EAAQsB,GAAOS,KACrBD,IAAK9B,EAAQsB,GAAOQ,IACpBL,eAAgBA,EAChBG,aAAcA,EACdC,eAAgBA,EAChBgB,YAAaA,EACbC,WAAYA,EACZC,kBAAmBA,EACnBC,WAAYA,EACZC,cAAeA,EACfE,aAAcA,GAEhB,IAAeP,IAAIQ,GAEnBhD,EAAMN,aACR,G,whCC1GF,MAAMuD,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,IFCA,GACEhC,KAAM,YACNiC,WAAY,CACVC,MAAK,GAEP,IAAAC,GACE,MAAO,CACL3D,SAAU,EAEd,EACA4D,QAAS,CACP,aAAA1D,GACE2D,KAAK7D,UAAY,CACnB,IGjBE,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAAS8D,KAEpE,G,yCCLA,IAAIC,EAAgB,GAETC,EAAO,CAACC,EAAcC,KAC/B,IAAIC,EAAY,GACZC,EAAQ,CACV,GAAAC,GAIE,OAHKD,EAAME,IACTF,EAAMG,QAAO,QAAbH,GAEKA,EAAMhE,KACf,EACAoE,EAAGN,GAAS,EACZI,GAAI,EACJ,MAAAC,CAAOE,EAAUC,GAGf,OAFAN,EAAME,GAAKH,EAAUQ,KAAKF,EAAUC,GAAiBN,EAAMI,GAAK,EAEzD,KACL,IAAI/C,EAAQ0C,EAAUS,QAAQH,IACzBhD,IACH0C,EAAUU,OAAOpD,EAAO,KACjB2C,EAAME,IAAIF,EAAMU,MACzB,CAEJ,EACA,MAAAC,CAAOC,EAAUC,GACf,IAAIC,GAAoBnB,EAAcoB,OACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAUgB,OAAQC,GAAK,EACzCrB,EAAcY,KACZR,EAAUiB,GACVjB,EAAUiB,EAAI,GACdhB,EAAMhE,MACN4E,EACAC,GAIJ,GAAIC,EAAkB,CACpB,IAAK,IAAIE,EAAI,EAAGA,EAAIrB,EAAcoB,OAAQC,GAAK,EAAG,CAChD,IAAIC,EACJ,IAAK,IAAIC,EAAIF,EAAI,GAAIC,IAASC,GAAK,GAAKvB,EAAcoB,QAChDpB,EAAcuB,GAAKvB,EAAcqB,EAAI,KACvCC,EAAOtB,EAAcY,KACnBZ,EAAcqB,GACdrB,EAAcqB,EAAI,GAClBrB,EAAcqB,EAAI,GAClBrB,EAAcqB,EAAI,GAClBrB,EAAcqB,EAAI,KAKnBC,GACHtB,EAAcqB,GACZrB,EAAcqB,EAAI,GAClBrB,EAAcqB,EAAI,GAClBrB,EAAcqB,EAAI,GAGxB,CACArB,EAAcoB,OAAS,CACzB,CACF,EAGA,GAAAL,GAAO,EACP,GAAA/B,CAAIwC,GACF,IAAIP,EAAWZ,EAAMhE,MACjB4E,IAAaO,IACfnB,EAAMhE,MAAQmF,EACdnB,EAAMW,OAAOC,GAEjB,EACA,SAAAQ,CAAUf,EAAUC,GAClB,IAAIe,EAASrB,EAAMG,OAAOE,EAAUC,GAEpC,OADAD,EAASL,EAAMhE,OACRqF,CACT,EACArF,MAAO6D,GAWT,OAAOG,GCxFF,MAAMsB,EAAS1B,EAAK,CAAC,GAEf2B,EAAiB3B,EAAK,G","sources":["webpack://medicine-tracker/./src/views/TableView.vue","webpack://medicine-tracker/./src/components/Table.vue","webpack://medicine-tracker/./src/components/Table.vue?7a8d","webpack://medicine-tracker/./src/views/TableView.vue?cc98","webpack://medicine-tracker/./node_modules/nanostores/atom/index.js","webpack://medicine-tracker/./src/store.js"],"sourcesContent":["<template>\n  <div class='container w-100'>\n    <Table :key=\"tableKey\" :updateTable='forceRerender'/>\n  </div>\n</template>\n\n<script>\nimport Table from '@/components/Table.vue'\n\nexport default {\n  name: 'TableView',\n  components: {\n    Table\n  },\n  data() {\n    return {\n      tableKey: 0,\n    };\n  },\n  methods: {\n    forceRerender() {\n      this.tableKey += 1;\n    }\n  }\n\n}\n</script>\n","<template>\n  <div>\n    <table class='w-100'>\n      <tr>\n        <th class='pt-2 px-2'>name</th>\n        <th class='pt-2 px-2'>/blister</th>\n        <th class='pt-2 px-2'>blisters</th>\n        <th class='pt-2 px-2'>loose</th>\n        <th class='pt-2 px-2'>pillbox (portion)</th>\n        <th class='pt-2 px-2'>pills</th>\n        <th class='pt-2 px-2'>days</th>\n        <th class='pt-2 px-2'>needed for target</th>\n        <th class='pt-2 px-2'>pills to get</th>\n        <th class='pt-2 px-2'>blisters to get</th>\n        <th class='pt-2 px-2'>will run out</th>\n      </tr>\n      <tr v-for=\"medicine in medList\" >\n        <td class='pt-2 px-2'>{{ medicine.name }}</td>\n        <td class='pt-2 px-2'>{{ medicine.ppb }}</td>\n        <td class='pt-2 px-2'><input class=\"form-control custom\" name=\"blister\" :value='medicine.blister_number'/></td>\n        <td class='pt-2 px-2'><input class=\"form-control custom\" name=\"loose\" :value='medicine.loose_number'/></td>\n        <td class='pt-2 px-2'><input class=\"form-control wider_custom\" name=\"pillbox\" :value='medicine.pillbox_number'/></td>\n        <td class='pt-2 px-2'>{{ truncateToDecimals(parseFloat(medicine.total_pills))}}</td>\n        <td class='pt-2 px-2'>{{ truncateToDecimals(parseFloat(medicine.total_days)) }}</td>\n        <td class='pt-2 px-2'>{{ Math.ceil(parseFloat(medicine.needed_for_target)) }}</td>\n        <td class='pt-2 px-2'>{{ truncateToDecimals(Math.ceil(parseFloat(medicine.need_pills))) }}</td>\n        <td class='pt-2 px-2'>{{ Math.ceil(parseFloat(medicine.need_blisters)) }}</td>\n        <td class='pt-2 px-2'>{{ medicine.will_run_out }}</td>\n        <td class='save' :id='medicine.name' @click='save_medicine(medicine.name)'><i class=\"bi bi-floppy2\"></i></td>\n      </tr>\n    </table>\n  </div>\n</template>\n\n<script setup>\nimport { $medicine_list, $admin } from '../store.js'\nconst medList = $medicine_list.value;\nconst target_date = $admin.value.target_date;\nlet target_days = $admin.value.target_days;\n\nconst props = defineProps({\n  updateTable: {\n    type: Function\n  }\n})\n\nfunction truncateToDecimals(num, dec = 2) {\n  const calcDec = Math.pow(10, dec);\n  return Math.trunc(parseFloat(num) * calcDec) / calcDec;\n}\n\nlet time_between_dates = (date1, date2) => {\n  const diffTime = Math.abs(date2 - date1);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return parseFloat(diffDays);\n}\n\nlet save_medicine = (name) => {\n  let index = medList.findIndex(item => item.name === name);\n  if (index !== -1) {\n    let blister_number = parseFloat(document.getElementsByName('blister')[index].value);\n    let loose_number = parseFloat(document.getElementsByName('loose')[index].value);\n    let pillbox_number = parseFloat(document.getElementsByName('pillbox')[index].value);\n\n    let ppb = parseFloat(medList[index].ppb);\n    let dose = parseFloat(medList[index].dose);\n    let frequency = parseFloat(medList[index].frequency);\n\n\n    let date = new Date();\n    let year = date.getFullYear();\n    let month = (date.getMonth() + 1);\n    let day = date.getDate();\n    let today = `${month}/${day}/${year}`\n\n    console.log(today)\n    console.log(target_date)\n    target_days = time_between_dates(new Date(today), new Date(target_date));\n    $admin.set({target_days: target_days, ...$admin.value});\n\n    let total_pills = ((blister_number * ppb) + loose_number + (pillbox_number * dose));\n    let total_days = parseFloat(total_pills / (frequency * dose));\n    let needed_for_target = Math.ceil(target_days * (dose * frequency));\n    let need_pills = Math.ceil(needed_for_target - total_pills);\n    let need_blisters = Math.ceil(need_pills / ppb);\n\n\n\n\n    date.setDate(date.getDate() + total_days);\n    let will_run_out = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n\n    let tempArray = [...medList];\n\n    tempArray[index] = {\n      name: name,\n      frequency: medList[index].frequency,\n      dose: medList[index].dose,\n      ppb: medList[index].ppb,\n      blister_number: blister_number,\n      loose_number: loose_number,\n      pillbox_number: pillbox_number,\n      total_pills: total_pills,\n      total_days: total_days,\n      needed_for_target: needed_for_target,\n      need_pills: need_pills,\n      need_blisters: need_blisters,\n      will_run_out: will_run_out,\n    };\n    $medicine_list.set(tempArray);\n\n    props.updateTable();\n  }\n}\n\n</script>\n\n<style scoped>\ntable {\n  color: rgb(209, 209, 209);\n  border:1px solid black;\n  width: 100%;\n}\nth {\n  border:1px solid black;\n}\ntd {\n  border:1px solid black;\n}\ninput {\n  text-align: center;\n  background-color: #483e5a;\n  border: none;\n  color: rgb(255, 255, 255);\n\n}\n.custom {\n  width: 50px;\n}\n.wider_custom {\n  width: 100px;\n}\n.save{\n  cursor: pointer;\n}\n\n@import'~bootstrap-icons/font/bootstrap-icons.css'\n</style>","import script from \"./Table.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Table.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Table.vue?vue&type=style&index=0&id=0e6d3f7c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0e6d3f7c\"]])\n\nexport default __exports__","import { render } from \"./TableView.vue?vue&type=template&id=5507b898\"\nimport script from \"./TableView.vue?vue&type=script&lang=js\"\nexport * from \"./TableView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { clean } from '../clean-stores/index.js'\n\nlet listenerQueue = []\n\nexport let atom = (initialValue, level) => {\n  let listeners = []\n  let $atom = {\n    get() {\n      if (!$atom.lc) {\n        $atom.listen(() => {})()\n      }\n      return $atom.value\n    },\n    l: level || 0,\n    lc: 0,\n    listen(listener, listenerLevel) {\n      $atom.lc = listeners.push(listener, listenerLevel || $atom.l) / 2\n\n      return () => {\n        let index = listeners.indexOf(listener)\n        if (~index) {\n          listeners.splice(index, 2)\n          if (!--$atom.lc) $atom.off()\n        }\n      }\n    },\n    notify(oldValue, changedKey) {\n      let runListenerQueue = !listenerQueue.length\n      for (let i = 0; i < listeners.length; i += 2) {\n        listenerQueue.push(\n          listeners[i],\n          listeners[i + 1],\n          $atom.value,\n          oldValue,\n          changedKey\n        )\n      }\n\n      if (runListenerQueue) {\n        for (let i = 0; i < listenerQueue.length; i += 5) {\n          let skip\n          for (let j = i + 1; !skip && (j += 5) < listenerQueue.length; ) {\n            if (listenerQueue[j] < listenerQueue[i + 1]) {\n              skip = listenerQueue.push(\n                listenerQueue[i],\n                listenerQueue[i + 1],\n                listenerQueue[i + 2],\n                listenerQueue[i + 3],\n                listenerQueue[i + 4]\n              )\n            }\n          }\n\n          if (!skip) {\n            listenerQueue[i](\n              listenerQueue[i + 2],\n              listenerQueue[i + 3],\n              listenerQueue[i + 4]\n            )\n          }\n        }\n        listenerQueue.length = 0\n      }\n    },\n    /* It will be called on last listener unsubscribing.\n       We will redefine it in onMount and onStop. */\n    off() {},\n    set(newValue) {\n      let oldValue = $atom.value\n      if (oldValue !== newValue) {\n        $atom.value = newValue\n        $atom.notify(oldValue)\n      }\n    },\n    subscribe(listener, listenerLevel) {\n      let unbind = $atom.listen(listener, listenerLevel)\n      listener($atom.value)\n      return unbind\n    },\n    value: initialValue\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    $atom[clean] = () => {\n      listeners = []\n      $atom.lc = 0\n      $atom.off()\n    }\n  }\n\n  return $atom\n}\n","import { atom, map } from 'nanostores';\n\nexport const $admin = atom({});\n\nexport const $medicine_list = atom([]);\n\n/*\n  name: 'lexi',\n  start_date: '02/07/2024',\n  target_date: '12/21/2024',\n  target_days: -1,\n  days_on: -1,\n{\n    name: 'Estradiol Valerate',\n    frequency: 3,\n    dose: 1,\n    ppb: 28,\n    blister_number: 0,\n    loose_number: 0,\n    pillbox_number: 0,\n    total_pills: 0,\n    total_days: 0,\n    needed_for_target: 0,\n    need_pills: 0,\n    need_blisters: 0,\n    will_run_out: '2024/12/21',\n  },\n*/\n"],"names":["class","key","tableKey","updateTable","forceRerender","medList","value","target_date","target_days","props","truncateToDecimals","num","dec","calcDec","Math","pow","trunc","parseFloat","time_between_dates","date1","date2","diffTime","abs","diffDays","ceil","save_medicine","name","index","findIndex","item","blister_number","document","getElementsByName","loose_number","pillbox_number","ppb","dose","frequency","date","Date","year","getFullYear","month","getMonth","day","getDate","today","console","log","set","total_pills","total_days","needed_for_target","need_pills","need_blisters","setDate","will_run_out","tempArray","__exports__","components","Table","data","methods","this","render","listenerQueue","atom","initialValue","level","listeners","$atom","get","lc","listen","l","listener","listenerLevel","push","indexOf","splice","off","notify","oldValue","changedKey","runListenerQueue","length","i","skip","j","newValue","subscribe","unbind","$admin","$medicine_list"],"sourceRoot":""}